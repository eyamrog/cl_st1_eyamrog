A perfect bacterial genome assembly is one where the assembled sequence is an exact match for the organism’s genome – each replicon sequence is complete and contains no errors of any scale. While this has been difficult to achieve in the past, improvements in long-read sequencing, assemblers and polishers have brought perfect assemblies within reach. Here we describe our recommended approach for assembling a bacterial genome to perfection using a combination of Oxford Nanopore Technologies long reads and Illumina short reads: Trycycler long-read assembly, Medaka long-read polishing, Polypolish short-read polishing, followed by other short-read polishing tools with manual curation. We also discuss potential pitfalls one might encounter when assembling challenging genomes, and we provide an online tutorial with sample data (github.com/rrwick/perfect-bacterial-genome-tutorial). 
This work was supported, in whole or in part, by the Bill & Melinda Gates Foundation (KEH, grant number OPP1175797). Under the grant conditions of the Foundation, a Creative Commons Attribution 4.0 Generic License has already been assigned to the Author Accepted Manuscript version that might arise from this submission. This work was also supported by an Australian Government Research Training Program Scholarship (RRW). The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript. 
Compared to eukaryotes which have complex genomes often exceeding one billion base pairs (bp) in length, prokaryote genomes are small, typically containing a single circular chromosome a few million bp in length and often small extrachromosomal plasmids1. In many genomic applications, it would be most useful to know the bacterial genome sequence in its entirety, i.e. the full sequence of nucleotides for each piece of DNA in the cell. However, DNA sequencers work by fragmenting the genome and sequencing the fragments, producing reads: randomly ordered small pieces of the genome2. Reads are imperfect, with the frequency and type of errors depending on the platform. They are also redundant, because it is necessary to produce reads that total to many times the genome size to ensure that the genome is well covered. There is thus a disconnect between what sequencers provide (small, imperfect, redundant sequences) and what we want (a complete, error-free genome). 
The solution to this problem is de novo assembly: the computational process of reconstructing a genome from sequencing reads. There are two broad goals to consider with genome assembly: accuracy and completeness. Accuracy refers to the number of errors present in the assembled sequences (contigs). Such errors can be small in scale (e.g. an incorrect base) or larger in scale (e.g. the addition/removal of hundreds of bases). Completeness refers to the length of the contigs relative to the corresponding genomic sequence, i.e. how fragmented the assembly is. Longer contigs are better, ideally each contig representing an entire replicon in the genome. We define a ‘perfect’ assembly as one which maximises both accuracy and completeness. A perfect assembly of a bacterial genome would contain one complete and error-free contig per replicon and no additional contigs. 
Many downstream analyses do not require high-quality assemblies, e.g. one can identify the species of a genome or the presence/absence of a gene using a crude assembly3. There are, however, tasks which require extreme accuracy, e.g. estimating mutation rates and inferring transmission chains, where even a small number of errors can have consequences. Perfect assemblies offer no limits on their downstream uses, making ‘is my assembly good enough?’ an irrelevant question. In the absence of assembly errors, many analyses which involve interrogating reads directly (using computationally intensive approaches, e.g. variant calling) could be replaced by simpler assembly-based alternatives. 
Here we describe and demonstrate a modern approach for producing a bacterial genome assembly with the goal of perfection using a combination of Oxford Nanopore Technologies (ONT) long reads and Illumina short reads (Figure 1). These platforms were chosen for their availability and widespread adoption in microbial genomics. While older hybrid assembly methods have used a short-read-first approach (building a short-read assembly graph and then scaffolding with long reads)4, improvements in the yield and accuracy of long-read sequencing now mean that long-read-first hybrid assembly (making a long-read-only assembly and then polishing with short reads) can produce more accurate results5, and that is the approach we use in this manuscript. We also provide an online tutorial (github.com/rrwick/perfect-bacterial-genome-tutorial) with sample data (hybrid sequencing of Staphylococcus aureus strain JKD61596) so readers can try this method for themselves. 
DNA should be extracted from a single bacterial colony to minimise the chance of genomic heterogeneity (see Pitfalls). While the best method for extracting DNA can vary by organism, one should aim to maximise purity and molecular weight. High purity will allow for better ONT yields, as chemical and biological impurities can damage or clog nanopores, shortening the life of flow cells7. High molecular weight will produce longer ONT reads, so one should avoid vortexing, minimise handling/pipetting and minimise freeze-thaw cycles to reduce shearing of DNA molecules8. Extraction methods for most bacteria should incorporate cell lysis by enzymatic digestion, using lysozyme (Sigma Aldrich, L6876) followed by proteinase K digestion (as provided in DNA extraction kits). This method is suitable for most Gram-negative and Gram-positive bacteria, but optimisation with additional enzymes may be required for difficult-to-lyse bacteria. Magnetic bead-based DNA extraction is recommended to reduce DNA shearing and maximise throughput. Recommended kits (in order of preference) are: GenFind V3 (Beckman Coulter, C34881) and MagAttract HMW DNA (Qiagen, 67563). For bacterial isolates that are difficult to lyse enzymatically, bead-beating can be used, but ONT read length may be compromised. 
If culturing and DNA extraction is conducted multiple times (e.g. once for ONT sequencing and again for Illumina sequencing), there is the risk of genomic differences between the DNA samples9. This can lead to difficulties during polishing, so we recommend using a single DNA extract for all sequencing runs. It may also be prudent to freeze additional DNA or bacterial pellets in case further sequencing is later required. 
One key consideration for ONT sequencing is depth: how deep must the ONT read set be? High read depth aids both assembly (allowing for more independent read sets in Trycycler, see Step 3) and polishing (yielding higher accuracy, see Step 4). When aiming for a perfect assembly, consider 100× depth to be a minimum, with 200× being ideal. Depths above 200× are better but will give diminishing returns. Using a single ONT flow cell for one bacterial isolate may provide excessive depth, so multiplexing is common in microbial genomics. This is not a problem for assembly, though barcode leakage should be considered (see Pitfalls). 
Another consideration is length: how long must the ONT reads be? N50 length is a commonly used metric: the length-weighted median10. To ensure a complete assembly, the read set should have an N50 length greater than the longest repeat sequence. For many bacterial genomes, this is the rRNA operon, which is ~5 kbp and usually present in multiple copies11, making an ONT read N50 of ~20 kbp a good target. In rare cases where the genome has an unusually long repeat (see Pitfalls), ultra-long DNA extraction protocols may be necessary12. 
ONT library preparation, chemistry and basecalling are also important factors. Both ligation-based and rapid preparations are appropriate for bacterial whole-genome sequencing, though ligation-based preparations can favour sequencing yield while rapid preparations can favour read length13. ONT currently offers MinION/GridION flow cells with two different pores: R9.4.1 (released in 2017) and R10.4.1 (released in 2022). The pores used in R10.4.1 flow cells are longer, improving homopolymer resolution and consensus accuracy, making them the better choice for assembly14. Basecalling, the computational process of translating the sequencer’s raw signals into nucleotide sequences, is under constant development, so users should opt for the most recent version of ONT’s recommended basecaller and use its highest-accuracy model. If users do not have an ONT sequencer with a GPU (e.g. a GridION), then access to a computer with a GPU will be required to perform basecalling. 
After basecalling, QC filtering can improve the quality of the ONT reads. We recommend using Filtlong15 to remove the worst reads (short length and low accuracy) with --keep_percent 90. If the read set has a poor N50 but is very deep, then removing short reads (e.g. <5 kbp) can help with assembly, though this may compromise small plasmid recovery (see Pitfalls). 
Since Illumina reads will only be used for final polishing (see Step 5), they carry less importance than ONT reads. Most current Illumina platforms produce similar data (e.g. 150-bp paired-end reads) and will function equally well for bacterial whole-genome sequencing, with instrument choice driven by cost and multiplexing needs. Nextera XT library preparations produce variable read depth (i.e. some regions of the genome may have low depth), so Illumina DNA Prep (a.k.a. Nextera DNA Flex) and TruSeq are preferable16. If Nextera XT is used, aim for a high mean depth (e.g. 300×) to compensate for depth variation, otherwise 100× should be sufficient. For highly repetitive genomes, mate-pair preparations may improve short-read polishing performance (see Pitfalls). After Illumina reads are produced, we recommend using a QC tool such as fastp17 to remove low-quality bases and adapter sequences. 
The goal of long-read assembly is to produce complete sequences with no structural errors, i.e. the only errors in the assembly should be small-scale, e.g. single-bp substitutions, insertions or deletions. This is because later polishing steps can repair small-scale errors but may not be able to fix larger structural errors. 
Several long-read assemblers have been developed that are suitable for bacterial genomes, including Canu18, Flye19, NECAT20, NextDenovo21 and Raven22, each of which uses different methods and thus has advantages/disadvantages. Regardless of the assembler used, most long-read bacterial genome assemblies contain avoidable errors, and given the same read set, different assemblers are likely to produce assemblies with different errors23. Trycycler exploits this fact by building a consensus from multiple alternative assemblies of the same genome, allowing it to avoid structural errors, remove spurious contigs and ensure that circular sequences have no missing/duplicated bases at their ends5. We therefore recommend using Trycycler to produce long-read bacterial genome assemblies. However, note that Trycycler is not an automated tool – it requires human judgement and interaction. 
This step aims to fix as many remaining errors as possible using only long reads. We recommend using Medaka24, which we have found to produce more accurate results than Nanopolish25,26. Medaka uses a neural network and comes with trained models that correspond to specific combinations of ONT chemistry and basecaller, so one should choose the Medaka model which most closely matches their ONT reads. Alternatively, long-read variant callers such as Clair327 can be used as polishers by applying the called variants to the assembly. 
Long-read polishing is done before short-read polishing because it is less influenced by genomic repeats. A ‘repeat’ in this context is a sequence which causes reads to align to multiple and/or incorrect positions of the genome. For example, some 150-bp short reads will be contained within the rRNA operon and will therefore align to multiple places, making the operon a repeat and impairing the ability of polishers to repair errors. With 20 kbp long reads, however, all can span the rRNA operon and therefore align uniquely, so the operon is not a repeat, ensuring that polishing changes occur in the correct instances of the operon. 
Long-read polishing usually improves assembly accuracy, but a drop in accuracy is sometimes possible. It can therefore be unclear at this step whether the unpolished assembly, Medaka-polished assembly or some alternative (e.g. Clair3-polished) is best. ALE is a tool which quantifies the concordance between an assembly and a short-read set28, allowing one to assess the relative accuracy of different assemblies. We therefore recommend using ALE to guide the decision regarding which version of the assembly should progress to the next step (short-read polishing). 
The previous steps have generated a long-read-only assembly of maximal accuracy, likely ~Q50 (one error per 100 kbp) if R10.4.1 ONT reads were used. The final step is to repair any remaining errors with short reads. For example, long homopolymers can be difficult for ONT sequencing to resolve14, but Illumina sequencing does not suffer from this problem12,29, so homopolymer-length errors which persist after long-read polishing can be fixed by short-read polishing. 
Our tool Polypolish30 was designed with two goals in mind. The first was to use all-per-read alignments to overcome some of the constraints imposed by repeats. The second was to be very conservative, i.e. to minimise the chance of introducing errors during polishing. Polypolish only makes changes that are unambiguously supported by the read alignments, so when there are multiple possibilities at a locus (e.g. a base could be A or C with some alignments supporting each), Polypolish will not change the sequence. For this reason, we recommend running Polypolish before any other short-read polisher. 
Due to its conservativeness, Polypolish may miss errors that other short-read polishers can fix, e.g. in regions of low Illumina depth. However, other polishers can introduce new errors30, which is unacceptable when aiming for perfection. We therefore recommend trying other short-read polishers but manually assessing any and all changes using a tool such as IGV31. Viewing the read alignments at a particular locus before/after polishing can clarify whether the change fixed an error (in which case it should be retained) or introduced an error (in which case it should be rejected)32. Polishers to try include POLCA33 (due to its low rate of introduced errors) and FMLRC234 (due to its ability to fix errors other polishers cannot). 
The above-described method requires human judgement and interaction, particularly at the Trycycler and short-read polishing steps. This allows users to catch unexpected results, ensuring that poor data does not proceed to the next step. This method is appropriate where accuracy is paramount (e.g. reference genome assembly), but it cannot be run in an automated manner (e.g. with Nextflow35) and is thus not suitable for high-throughput assembly. 
If automation is required, changes in the workflow are needed. Flye19 is less likely than other long-read assemblers to produce large-scale errors which downstream polishers may not be able to fix23, making it a good replacement for Trycycler. Before polishing with Medaka, circular Flye contigs should be ‘rotated’ to a consistent starting sequence (e.g. dnaA36) or random starting sequence. This will serve to move any duplicated/missing bases at the start/end of circular contigs to the middle of the sequence where polishing tools can repair the error. For short-read polishing, we recommend Polypolish followed by POLCA, as these tools are the least likely to introduce errors30. 
Users should not assume that automated assemblies are error-free. In particular, structural errors (e.g. fragmented replicons, doubled plasmids, etc.) are possible, as these are what Trycycler aims to avoid. 
Small plasmids (<20 kbp) can be underrepresented in ONT read sets, due to either ligation preparations (where circular sequences fail to acquire adapters13) or overly aggressive QC (e.g. discarding all reads <10 kbp). This can be avoided by using rapid preparations and less stringent QC (e.g. only discarding reads <1 kbp). Alternatively, small plasmids can be recovered from an Illumina-only or short-read-first-hybrid assembly graph (e.g. from Unicycler4) where they usually appear as circular contigs separate from the rest of the genome (Figure 2A). 
Some bacterial taxa have undergone proliferation of insertion sequence elements in their evolution, resulting in genomes with hundreds of 1–2 kbp repeats37,38. Perfect assembly of such genomes can be challenging because short-read polishers struggle to repair errors in high-copy-number repeats (Figure 2B). For this reason, it is crucial to maximise ONT-only accuracy (using high ONT depth, R10.4.1 pores, ‘super’ basecalling and Medaka polishing) to minimise the number of errors left for short-read polishing to fix. Additionally, mate-pair Illumina sequencing may enable Polypolish to fix errors within repeat sequences by reducing the number of ambiguous short-read alignments39. 
While the ~5 kbp rRNA operon is the longest repeat in many bacterial genomes, longer repeats are possible. For example, Mycobacterium smegmatis mc2155 contains a 56 kbp duplication in its chromosome40. In such cases, typical ONT read lengths (~20 kbp) can be insufficient for assembly and ultra-long reads (~100 kbp) are needed (Figure 2C). 
Demultiplexing errors can occur in multiplexed sequencing runs: reads from one barcode can ‘leak’ into another, resulting in low-level contamination41. When a sequence in one barcode is very high depth, it may appear in other barcodes at sufficient depths to be assembled. This most often occurs with high-copy-number plasmids (Figure 2D), so when multiple genome assemblies from the same sequencing run contain identical plasmids, cross-barcode contamination should be considered as a possible cause. 
Heterogeneity occurs when there is not a single underlying genome but rather a mixture of two or more alternatives. This can occur at small scales (e.g. a mixture of different bases at a locus) or large scales (e.g. a mixture of structural configurations). When heterogeneity occurs at a low level (e.g. 95% of the reads support one sequence and 5% another), it does not typically cause problems as assemblers/polishers will use the more common alternative. However, balanced heterogeneity (e.g. a 50:50 mixture) can cause misassemblies and polishing mistakes. The phase variation of the fim switch is one cause of heterogeneity in Enterobacteriaceae44 (Figure 2E). Another common example occurs with bacteriophages, which can integrate into and excise from bacterial chromosomes45 (Figure 2F). Heterogeneity can be identified by incomplete assembly graphs and dense clusters of changes made by a polisher. It may then be necessary to manually exclude reads which support one alternative, allowing the other alternative to assemble/polish cleanly. 
In contrast to short-read-first hybrid assembly approaches of the past (e.g. Unicycler), our recommended method follows a long-read-first paradigm. Due to their improved handling of repeats, long reads form a solid assembly foundation, with short reads only used for final polishing. Using this approach, we believe perfect genome assemblies with zero errors are achievable. However, it is not easy to establish a ground truth genome sequence, so when assembly accuracy is critical, we recommend performing multiple alternative assemblies that vary in data/methods: sequencing platforms, assemblers in the Trycycler pipeline, read QC thresholds, short-read polishing tools, etc. When alternative data/methods produce identical assemblies, this builds confidence in their correctness. When alternative assemblies are not identical, further investigation (e.g. visualising read alignments in IGV) is warranted. 
While perfect bacterial genome assemblies are now possible, they are not yet simple to produce. The future will undoubtedly bring improvements to ONT chemistry, basecallers and polishers, but whether these will be sufficient for perfect ONT-only assemblies (negating the need for Illumina reads) remains to be seen. Further software developments are needed to remove the human-interaction elements, enabling perfect assemblies from a fully automated pipeline, even in complicated cases (e.g. genomes with heterogeneity). The ultimate goal is a future where genomes can be assembled to perfection with enough ease and reliability that it is taken for granted. 